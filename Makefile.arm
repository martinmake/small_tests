include $(MAKEFILE).config
include Makefile.config

export TARGET DEVICE

# LIBS+=standard
DEFS+=$(ENVIROMENTAL_DEFS)
DEFS+=$(DEVICE)

LIBS:=$(addprefix -l,$(LIBS))
DEFS:=$(addprefix -D,$(DEFS))

SRCS_C  :=$(shell find $(DIR_SRC) -name '*.c'  )
SRCS_CXX:=$(shell find $(DIR_SRC) -name '*.cpp')
SRCS_ASM:=$(shell find $(DIR_SRC) -name '*.S'  )

OBJS_C  :=$(patsubst $(DIR_SRC)/%.c,  $(DIR_OBJ)/%.o,$(SRCS_C)  )
OBJS_CXX:=$(patsubst $(DIR_SRC)/%.cpp,$(DIR_OBJ)/%.o,$(SRCS_CXX))
OBJS_ASM:=$(patsubst $(DIR_SRC)/%.S,  $(DIR_OBJ)/%.o,$(SRCS_ASM))
OBJS    :=$(OBJS_C) $(OBJS_CXX) $(OBJS_ASM)

INC:=$(addprefix -I,$(DIRS_INC) $(DIR_INC_LIB) $(DIRS_INC_DRV))

LDSCRIPTS:=$(addprefix -T,$(LDSCRIPTS))

FLAGS_CC  :=$(WARNING) $(OPTIMIZATION) -s $(TARGET) $(INC) $(DEFS) -std=c99
FLAGS_CXX :=$(WARNING) $(OPTIMIZATION) -s $(TARGET) $(INC) $(DEFS) -std=c++14 -fno-rtti
FLAGS_ASMC:=$(WARNING) $(OPTIMIZATION) -s $(TARGET) $(INC) $(DEFS)
FLAGS_LD  :=$(WARNING) $(OPTIMIZATION)    $(TARGET) $(LDSCRIPTS) -Wl,--gc-sections --specs=nosys.specs

.SECONDARY: $(OBJS)

.PHONY: all
all: $(ELF)
	@echo "> BULDING"
	$(OBJCOPY) -O ihex   $(ELF)   $(HEX)
	$(OBJCOPY) -O binary $(ELF)   $(BIN)
	$(OBJDUMP) -Dz       $(ELF) > $(ASM)
	$(SIZE) $(HEX) | sed -e 's/^/* /'
	@echo "< BULDING DONE"

$(ELF): $(OBJS) $(ARC_DRV)
	@echo "> LINKING"
	$(LD) $(FLAGS_LD) $^ $(LIBS) -o $@
	@echo "< LINKING DONE"

$(DIR_OBJ)/%.o: $(DIR_SRC)/%.c
	@echo "> COMPILING $<"
	$(CC)   $(FLAGS_CC)   -c $< -o $@
	@echo "< COMPILING $< DONE"
$(DIR_OBJ)/%.o: $(DIR_SRC)/%.cpp
	@echo "> COMPILING $<"
	$(CXX)  $(FLAGS_CXX)  -c $< -o $@
	@echo "< COMPILING $< DONE"
$(DIR_OBJ)/%.o: $(DIR_SRC)/%.S
	@echo "> COMPILING $<"
	$(ASMC) $(FLAGS_ASMC) -c $< -o $@
	@echo "< COMPILING $< DONE"
$(ARC_DRV):
	@echo "> COMPILING DRIVERS"
	+make -C $(DIR_DRV) | sed 's/^/\t/'
	@echo "< COMPILING DRIVERS DONE"

$(DIR_DEP)/%.d: $(DIR_SRC)/%.c
	@echo "> BUILDING DEPENDENCIES $<"
	$(CC)   $(FLAGS_CC)   -MM $< -MT '$(patsubst $(DIR_DEP)/%.d,$(DIR_OBJ)/%.o,$@)' > $@
	@echo "< BUILDING DEPENDENCIES $< DONE"
$(DIR_DEP)/%.d: $(DIR_SRC)/%.cpp
	@echo "> BUILDING DEPENDENCIES $<"
	$(CXX)  $(FLAGS_CXX)  -MM $< -MT '$(patsubst $(DIR_DEP)/%.d,$(DIR_OBJ)/%.o,$@)' > $@
	@echo "< BUILDING DEPENDENCIES $< DONE"
$(DIR_DEP)/%.d: $(DIR_SRC)/%.S
	@echo "> BUILDING DEPENDENCIES $<"
	$(ASMC) $(FLAGS_ASMC) -MM $< -MT '$(patsubst $(DIR_DEP)/%.d,$(DIR_OBJ)/%.o,$@)' > $@
	@echo "< BUILDING DEPENDENCIES $< DONE"

.PHONY: flash
flash: $(BIN)
	@echo "> FLASHING $<"
	sudo st-flash write $< 0x08000000
	@echo "< FLASHING $< DONE"

.PHONY: serial
serial:
	@echo "> SERIAL MONITOR"
	sudo tio -b $(SERIAL_BAUDRATE) -d 8 -s 2 -e -mINLCRNL $(PORT)
	@echo "> SERIAL MONITOR DONE"

.PHONY: bear
bear:
	@better-bear $(DIR_SRC) $(DIRS_INC)

.PHONY: clean
clean: CLEAN_FILES:=$(ELF) $(HEX) $(BIN) $(ASM) $(shell find ./$(DIR_OBJ) ./$(DIR_DEP) -type f -name '[!.]*')
clean:
	@echo "> CLEANING"
	-rm -vfr $(shell echo $(CLEAN_FILES) | tr " " "\n" | sort) | sed -e 's/^/* /'
	@echo "< CLEANING DONE"

ifeq ($(NO_DEPENDENCIES),)
-include $(patsubst $(DIR_SRC)/%.c,  $(DIR_DEP)/%.d,$(SRCS_C)  )
-include $(patsubst $(DIR_SRC)/%.cpp,$(DIR_DEP)/%.d,$(SRCS_CXX))
-include $(patsubst $(DIR_SRC)/%.S,  $(DIR_DEP)/%.d,$(SRCS_ASM))
endif
